name: Deploy Docker Container

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create .env file
      run: echo "${{ secrets.ENVIRONMENTAL_VARIABLES }}" > .env

    - name: Build Docker image
      run: docker build . -t emailNotification:latest

    - name: Save Instance of Image
      run: docker save emailNotification:latest > emailNotification.tar

    - name: Remove old image file on server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
          if [ -f "~/home/emailNotification.tar" ]; then
            rm -f ~/home/emailNotification.tar
          fi

          if [ ! -d "~/home" ]; then
            mkdir -p ~/home
          fi

    - name: Copy Docker image to server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        source: "emailNotification.tar"
        target: "~/home/"

    - name: Load Docker image and run container on server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |

          
          # Check if the container is running, stop and remove it if it is
          if [ $(docker ps -q -f name=emailNotification) ]; then
            docker stop emailNotification
            docker rm emailNotification
          # Check if the container exists (but is stopped), remove it if it does
          elif [ $(docker ps -aq -f status=exited -f name=emailNotification) ]; then
            docker rm emailNotification
          fi

          # Remove any existing image with the same name before loading a new one
          docker image inspect emailNotification:latest > /dev/null 2>&1 && docker image rm emailNotification:latest
          docker load < ~/home/emailNotification.tar          
          
          # Run the new container
          docker run -d --restart always --name emailNotification -p 3000:3000 emailNotification:latest

          # Remove the emailNotification.tar file after loading and running the container
          rm -f ~/home/emailNotification.tar